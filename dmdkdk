# def 함수명(매개변수):
#     실행문1
#     실행문2
#     return 결과값
#
#     함수명(인수)

#함수의 입력값이 없는 경우
# def return_A():
#     return "A"
#
# print(return_A())
#
# 함수의 반환값이 없는 경우
# def print_string(string:str):
#     print(string)
#
# print(print_string("Hello"))
#
#
# 입력값, 반환값 둘 다 없는 경우
#
# def what_time_is_it_now():
#     import datetime
#     print(str(datetime.datetime.now())[:16])
#
# what_time_is_it_now()


#매개변수의 개수가 몇 개가 필요한지 모를경우
# def sum_nums(*args):
#     total = 0
#     for num in args:
#         total += num
#     return total
#
# print(sum_nums(1,2,3,4,5,6,7,8,9))

#여러개의 문자열을 입력받아 하나의 문자열로 반환하는 sum_strings함수를 구현하시오.
# print(sum_strings("Hello","Everyone","My","name","is","LimHyunSung"))
# 출력값 => "Hello Evryone My name is LimHyunSung
# def sum_strings(*args):
#     full_string = ''
#     for s in args:
#         full_string += s
#         full_string += ' '
#     return full_string
# print(sum_strings("Hello","Everyone","My","name","is","LimHyunSung"))

#입력한 인수를 딕셔너리 형태로 사용하고 싶을 때
# def print_dict(**kwargs):
#     print(kwargs)
#
# print_dict(A = 1, B = 2)


#내 이름과 나이,직없을 출력하는 introduce_myself라는 이름의 함수를 작성해 보자.
#출력형태: 제 이름은 ???이고 나이는 ??살이며 직업은 ???입니다.
#매개변수의 초기값
# def introduce_myself(name,age,job):
#     print(f"제 이름은 {name} 이고, 나이는 {age}살 이며, 직업은 {job} 입니다.")
#
# name = "신찬희"
# age = "2"
# job = "괴물"
# introduce_myself(name,age,job)


#함수의 리턴 값은 항상 하나이다.
# def Fourcal(num1,num2):
#     return num1 + num2, num1 - num2, num1 * num2, num1 / num2
#
# print(Fourcal(3,4))
#
#지역 변수와 전역 변수
# a = 3
# def function():
#     a = 2
#     print(a)
# function()
# print(a)
#
#global 명령어
# a = 3
# def function():
#     global a
#     a = 2
#     print(a)
# function()
# print(a)

# 키패드 누르기
# def solution(numbers, hand):
#     answer = ''
#     coord = [(0, -2),(-1, 1), (0, 1), (1, 1),(-1, 0), (0, 0), (1, 0),(-1,-1), (0,-1), (1,-1)]
#     l = (-1, -2)
#     r = (1, -2)
#     for n in numbers:
#         if n in [1, 4, 7]:
#             answer += 'L'
#             l = coord[n]
#         elif n in [3, 6, 9]:
#             answer += 'R'
#             r = coord[n]
#         else:
#             ld = abs(coord[n][0] - l[0]) + abs(coord[n][1] - l[1])
#             rd = abs(coord[n][0] - r[0]) + abs(coord[n][1] - r[1])
#
#             if ld == rd:
#                 if hand == 'left':
#                     answer += 'L'
#                     l = coord[n]
#                 else:
#                     answer += 'R'
#                     r = coord[n]
#             elif ld > rd:
#                 answer += 'R'
#                 r = coord[n]
#             else:
#                 answer += 'L'
#                 l = coord[n]
#     return answer
#
# number = [1, 3, 4, 5, 8, 2, 1, 4, 5, 9, 5]
# hand = "R"
#
# print(solution(number,hand))
